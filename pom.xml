<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>sk.homisolutions.shotbox</groupId>
    <artifactId>ShotBoxProject</artifactId>
    <version>0.1.0-Developing</version>
    <packaging>pom</packaging>

    <modules>
        <!-- This is the main module -->
        <module>ShotBoxPlatform</module>

        <!-- There are support modules: -->

        <!-- Module for loading classes and jars. Can work standalone, outside this project -->
        <module>LibrariesLoaderSystem</module>

        <!-- Specifications for Platform structure and LibrariesLoaderSystem  -->


        <!-- Specification for External modules loadable by LibrariesLoaderSystem -->
        <module>ShotBoxToolsSet</module>

        <!-- Just module for testing LibrariesLoaderSystem. Generates classes and stuff. -->
        <module>TestClassesForLLSystem</module>

        <!-- There are ShotBox Native External Modules - SNEM -->

        <!-- Implementation of Simple Camera module for GoPro camera (ProxyModule) -->
        <module>SNEM_SimpleCamera_GoProHeroFourBlack</module>

        <!-- Implementation of Simple Camera module for basic web camera -->
        <module>SNEM_SimpleCamera_WebCamera</module>

        <!-- Implementation of Shooting trigger module for Keyboard -->
        <module>SNEM_ShootTrigger_Keyboard</module>

        <!-- Implementation of Shooting trigger module for Raspbery Pi GPIO Button (Button is connected to pin: unknown right now) -->
        <!-- This module is little bit tricky, but it is not extraordinary situation. See comments in POM of this module.  -->
        <!-- You should not use this module, if you are not running ShotBox on Raspberry Pi-->
        <module>SNEM_ShootTrigger_RpiGpioButton</module>

        <!-- Implementation of Image processor module for storing photos on Filesystem.
        This module is temporary and will removed lately with implementation-->
        <module>SNEM_ImageHandler_StoringPhotoOnFilesystem</module>

        <!-- Implementation of Graphical User Interface for showing photos and triggering shots-->
        <module>SNEM_GUI_BasicWebImplementation</module>

        <!-- Implementation of manually written photo filter Median -->
        <module>SNEM_PhotoFilter_Median</module>

        <!-- Implementation of manually written photo filter Sharpen -->
        <module>SNEM_PhotoFilter_Sharpen</module>

        <!-- Module created only for testing purpose -->
        <module>SNEM_PhotoFilter_TestFilter01</module>

        <!-- Module created only for testing purpose -->
        <module>SNEM_PhotoFilter_TestFilter02</module>

        <!-- Module created only for testing purpose -->
        <module>SNEM_PhotoFilter_TestFilter03</module>

        <!-- Example implementation of Scene Controller. This module just set RPI pin GPIO17 to high output,
          which can, for example, turn on LED diode. -->
        <module>SNEM_SceneController_RpioGpio17Controller</module>

        <!-- Module created only for testing purpose -->
        <module>SNEM_SceneController_Testing_MockedController</module>

    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!--<plugin>-->
                <!--<artifactId>exec-maven-plugin</artifactId>-->
                <!--<groupId>org.codehaus.mojo</groupId>-->
                <!--<version>1.5.0</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>Generating .deb package</id>-->
                        <!--<phase>generate-sources</phase>-->
                        <!--<goals>-->
                            <!--<goal>exec</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<executable>./scripts/create_deb_package.sh</executable>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
        </plugins>
    </build>
</project>